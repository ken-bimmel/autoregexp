{"version":3,"sources":["ReplaceBox.jsx","App.jsx","index.js"],"names":["ReplaceBox","props","useState","config","find","findRegExp","setFindRegExp","replace","replaceValue","setReplaceValue","useEffect","changeCallback","Grid","item","Card","CardContent","container","direction","TextField","label","value","helperText","onChange","event","target","style","width","Alert","elevation","variant","App","theme","createTheme","palette","type","importedReplacements","setImportedReplacements","replacedText","setReplacedText","replacements","setReplacements","clipSuccess","setClipSuccess","clipFailure","setClipFailure","htmlToMarkdown","setHtmlToMarkdown","turndownService","TurndownService","headingStyle","hr","bulletListMarker","codeBlockStyle","handlePaste","rawText","clipboardData","window","getData","turndown","replacement","regExp","RegExp","replaceAll","navigator","clipboard","writeText","then","openClipSuccessSnack","openClipFailureSnack","makeChangeCallback","idx","tempReplacements","reason","closeClipSuccessSnack","closeClipFailureSnack","ThemeProvider","justifyContent","alignItems","spacing","margin","maxWidth","xs","FormControlLabel","control","Switch","checked","color","multiline","rows","onPaste","fullWidth","disabled","placeholder","CardActions","Button","onClick","importedConfig","JSON","parse","console","log","stringify","map","Snackbar","open","autoHideDuration","onClose","severity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5a6cde3.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { Card, CardContent } from '@material-ui/core';\n\nfunction ReplaceBox(props) {\n  const [findRegExp, setFindRegExp] = useState(props.config.find);\n  const [replaceValue, setReplaceValue] = useState(props.config.replace);\n\n  function handleNewFindRegExp(event) {\n    setFindRegExp(event.target.value)\n  }\n\n  function handleNewReplaceValue(event) {\n    setReplaceValue(event.target.value)\n  }\n\n  useEffect(() => {\n    if (findRegExp && replaceValue) {\n      props.changeCallback({ find: findRegExp, replace: replaceValue })\n    }\n  }, [findRegExp, replaceValue, props])\n\n  return (\n    <Grid item>\n      <Card>\n        <CardContent>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <TextField\n                label=\"Find RegExp\"\n                value={findRegExp}\n                helperText=\"Must use JS regexp syntax\"\n                onChange={handleNewFindRegExp}\n                style={{ width: \"100%\" }}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Replace value\"\n                value={replaceValue}\n                helperText=\"Must use JS regexp syntax\"\n                onChange={handleNewReplaceValue}\n                style={{ width: \"100%\" }}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}\n\nexport default ReplaceBox;\n","import { React, useState } from 'react';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ReplaceBox from './ReplaceBox';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  FormControlLabel,\n  Switch,\n  Snackbar,\n  TextField,\n  Grid\n} from '@material-ui/core';\nimport {\n  createTheme,\n  ThemeProvider\n} from '@material-ui/core/styles';\nimport TurndownService from 'turndown';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction App() {\n  const theme = createTheme(\n    {\n      palette: {\n        type: 'dark'\n      }\n    }\n  )\n\n  const [importedReplacements, setImportedReplacements] = useState(\"\");\n  const [replacedText, setReplacedText] = useState(\"\");\n  const [replacements, setReplacements] = useState([{ find: \"a\", replace: \"a\" }]);\n  const [clipSuccess, setClipSuccess] = useState(false);\n  const [clipFailure, setClipFailure] = useState(false);\n\n  const [htmlToMarkdown, setHtmlToMarkdown] = useState(false);\n\n  const turndownService = new TurndownService(\n    {\n      headingStyle: \"atx\",\n      hr: \"---\",\n      bulletListMarker: \"-\",\n      codeBlockStyle: \"fenced\"\n    }\n  )\n\n\n\n  function handlePaste(event) {\n    let rawText = (event.clipboardData || window.clipboardData).getData('text');\n    if (htmlToMarkdown) {\n      rawText = (event.clipboardData || window.clipboardData).getData('text/html');\n      rawText = turndownService.turndown(rawText);\n    }\n    for (let replacement of replacements) {\n      const regExp = new RegExp(replacement.find, 'g');\n      rawText = rawText.replaceAll(regExp, replacement.replace)\n    }\n    setReplacedText(rawText);\n    navigator.clipboard.writeText(rawText).then(openClipSuccessSnack, openClipFailureSnack)\n  }\n\n  function addReplacement() {\n    if (replacements) {\n      setReplacements([...replacements, { find: \"a\", replace: \"a\" }])\n    } else {\n      setReplacements([{ find: \"a\", replace: \"a\" }])\n    }\n  }\n\n  function importReplacements() {\n    const importedConfig = JSON.parse(importedReplacements);\n    setReplacements(importedConfig);\n  }\n\n  function exportReplacements() {\n    console.log(JSON.stringify(replacements));\n  }\n\n  function makeChangeCallback(idx) {\n    const callback = function changeCallback(replacement) {\n      let tempReplacements = replacements;\n      tempReplacements[idx] = replacement;\n      setReplacements(tempReplacements)\n    }\n    return callback;\n  }\n\n  function openClipSuccessSnack(event, reason) {\n    setClipSuccess(true)\n  }\n\n  function closeClipSuccessSnack(event, reason) {\n    setClipSuccess(false)\n  }\n\n  function openClipFailureSnack(event, reason) {\n    setClipFailure(true)\n  }\n\n  function closeClipFailureSnack(event, reason) {\n    setClipFailure(false)\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        spacing={4}\n        style={{ margin: \"0px\", maxWidth: \"100%\" }}\n      >\n        <Grid item xs={7}>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={4}\n          >\n            <Grid item>\n              <Card>\n                <CardContent>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={htmlToMarkdown}\n                        onChange={(event) => setHtmlToMarkdown(event.target.checked)}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Convert HTML To Markdown on Paste (before replacement)\"\n                  />\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item>\n              <Card>\n                <TextField\n                  label=\"Paste Text Here\"\n                  multiline\n                  rows={20}\n                  variant=\"outlined\"\n                  onPaste={handlePaste}\n                  fullWidth\n                />\n              </Card>\n            </Grid>\n            <Grid item>\n              <Card>\n                <TextField\n                  label=\"Modified Text\"\n                  multiline\n                  rows={20}\n                  variant=\"outlined\"\n                  onPaste={handlePaste}\n                  fullWidth\n                  disabled\n                  value={replacedText}\n                />\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={5}>\n          <Grid container spacing={2} direction=\"column\">\n            <Grid item>\n              <Card>\n                <CardContent>\n                  <TextField\n                    multiline\n                    variant=\"outlined\"\n                    fullWidth\n                    placeholder=\"Put config JSON here.\"\n                    value={importedReplacements}\n                    onChange={(event) => setImportedReplacements(event.target.value)}\n                  />\n                </CardContent>\n                <CardActions>\n                  <Button onClick={addReplacement}>Add Replacement</Button>\n                  <Button onClick={importReplacements}>Import Config</Button>\n                  <Button onClick={exportReplacements}>Export Config</Button>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid item>\n              <Grid container spacing={2} direction=\"column\">\n                {replacements ?\n                  replacements.map((replacement, idx) => <ReplaceBox key={idx} config={replacement} changeCallback={makeChangeCallback(idx)}></ReplaceBox>)\n                  : \"No replacements\"}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Snackbar open={clipSuccess} autoHideDuration={3000} onClose={closeClipSuccessSnack}>\n        <Alert onClose={closeClipSuccessSnack} severity=\"success\">\n          Processed and copied to clipboard!\n        </Alert>\n      </Snackbar>\n      <Snackbar open={clipFailure} autoHideDuration={3000} onClose={closeClipFailureSnack}>\n        <Alert onClose={closeClipFailureSnack} severity=\"error\">\n          Processed and copied to clipboard!\n        </Alert>\n      </Snackbar>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}