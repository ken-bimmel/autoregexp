{"version":3,"sources":["ReplaceBox.jsx","App.jsx","index.js"],"names":["ReplaceBox","props","useState","config","find","findRegExp","setFindRegExp","replace","replaceValue","setReplaceValue","useEffect","changeCallback","Grid","item","Card","CardContent","container","direction","TextField","label","value","helperText","onChange","event","console","log","target","style","width","Alert","elevation","variant","App","importedReplacements","setImportedReplacements","replacedText","setReplacedText","replacements","setReplacements","clipSuccess","setClipSuccess","clipFailure","setClipFailure","handlePaste","rawText","clipboardData","window","getData","replacement","regExp","RegExp","replaceAll","navigator","clipboard","writeText","then","openClipSuccessSnack","openClipFailureSnack","makeChangeCallback","idx","tempReplacements","reason","closeClipSuccessSnack","closeClipFailureSnack","justifyContent","alignItems","spacing","margin","maxWidth","xs","multiline","rows","onPaste","fullWidth","disabled","placeholder","CardActions","Button","onClick","importedConfig","JSON","parse","stringify","map","Snackbar","open","autoHideDuration","onClose","severity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2858e84b.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { Card, CardContent } from '@material-ui/core';\n\nfunction ReplaceBox(props) {\n  const [findRegExp, setFindRegExp] = useState(props.config.find);\n  const [replaceValue, setReplaceValue] = useState(props.config.replace);\n\n  function handleNewFindRegExp(event) {\n    console.log(event, event.target.value);\n    setFindRegExp(event.target.value)\n  }\n\n  function handleNewReplaceValue(event) {\n    setReplaceValue(event.target.value)\n  }\n\n  useEffect(() => {\n    if (findRegExp && replaceValue) {\n      props.changeCallback({ find: findRegExp, replace: replaceValue })\n    }\n  }, [findRegExp, replaceValue])\n\n  return (\n    <Grid item>\n      <Card>\n        <CardContent>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <TextField\n                label=\"Find RegExp\"\n                value={findRegExp}\n                helperText=\"Must use JS regexp syntax\"\n                onChange={handleNewFindRegExp}\n                style={{ width: \"100%\" }}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Replace value\"\n                value={replaceValue}\n                helperText=\"Must use JS regexp syntax\"\n                onChange={handleNewReplaceValue}\n                style={{ width: \"100%\" }}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}\n\nexport default ReplaceBox;\n","import { React, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ReplaceBox from './ReplaceBox';\nimport { Button, Card, CardActions, CardContent } from '@material-ui/core';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction App() {\n  const [importedReplacements, setImportedReplacements] = useState(\"\");\n  const [replacedText, setReplacedText] = useState(\"\");\n  const [replacements, setReplacements] = useState([{ find: \"a\", replace: \"a\" }]);\n  const [clipSuccess, setClipSuccess] = useState(false);\n  const [clipFailure, setClipFailure] = useState(false);\n\n\n\n  function handlePaste(event) {\n    let rawText = (event.clipboardData || window.clipboardData).getData('text');\n    console.log(replacements);\n    for (let replacement of replacements) {\n      const regExp = new RegExp(replacement.find, 'g');\n      rawText = rawText.replaceAll(regExp, replacement.replace)\n      console.log(\"replacing\", regExp, replacement.replace, rawText)\n    }\n    console.log(\"Final text\", rawText)\n    setReplacedText(rawText);\n    navigator.clipboard.writeText(rawText).then(openClipSuccessSnack, openClipFailureSnack)\n  }\n\n  function addReplacement() {\n    if (replacements) {\n      setReplacements([...replacements, { find: \"a\", replace: \"a\" }])\n    } else {\n      setReplacements([{ find: \"a\", replace: \"a\" }])\n    }\n  }\n\n  function importReplacements() {\n    const importedConfig = JSON.parse(importedReplacements);\n    setReplacements(importedConfig);\n  }\n\n  function exportReplacements() {\n    console.log(JSON.stringify(replacements));\n  }\n\n  function makeChangeCallback(idx) {\n    const callback = function changeCallback(replacement) {\n      let tempReplacements = replacements;\n      tempReplacements[idx] = replacement;\n      setReplacements(tempReplacements)\n    }\n    return callback;\n  }\n\n  function openClipSuccessSnack(event, reason) {\n    setClipSuccess(true)\n  }\n\n  function closeClipSuccessSnack(event, reason) {\n    setClipSuccess(false)\n  }\n\n  function openClipFailureSnack(event, reason) {\n    setClipFailure(true)\n  }\n\n  function closeClipFailureSnack(event, reason) {\n    setClipFailure(false)\n  }\n\n  return (\n    <div>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        spacing={4}\n        style={{ margin: \"0px\", maxWidth: \"100%\" }}\n      >\n        <Grid item xs={7}>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={4}\n          >\n            <Grid item>\n              <Card>\n                <TextField\n                  label=\"Paste Text Here\"\n                  multiline\n                  rows={20}\n                  variant=\"outlined\"\n                  onPaste={handlePaste}\n                  fullWidth\n                />\n              </Card>\n            </Grid>\n            <Grid item>\n              <Card>\n                <TextField\n                  label=\"Modified Text\"\n                  multiline\n                  rows={20}\n                  variant=\"outlined\"\n                  onPaste={handlePaste}\n                  fullWidth\n                  disabled\n                  value={replacedText}\n                />\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={5}>\n          <Grid container spacing={2} direction=\"column\">\n            <Grid item>\n              <Card>\n                <CardContent>\n                  <TextField\n                    multiline\n                    variant=\"outlined\"\n                    fullWidth\n                    placeholder=\"Put config JSON here.\"\n                    value={importedReplacements}\n                    onChange={(event) => setImportedReplacements(event.target.value)}\n                  />\n                </CardContent>\n                <CardActions>\n                  <Button onClick={addReplacement}>Add Replacement</Button>\n                  <Button onClick={importReplacements}>Import Config</Button>\n                  <Button onClick={exportReplacements}>Export Config</Button>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid item>\n              <Grid container spacing={2} direction=\"column\">\n                {replacements ?\n                  replacements.map((replacement, idx) => <ReplaceBox key={idx} config={replacement} changeCallback={makeChangeCallback(idx)}></ReplaceBox>)\n                  : \"No replacements\"}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Snackbar open={clipSuccess} autoHideDuration={3000} onClose={closeClipSuccessSnack}>\n        <Alert onClose={closeClipSuccessSnack} severity=\"success\">\n          Processed and copied to clipboard!\n        </Alert>\n      </Snackbar>\n      <Snackbar open={clipFailure} autoHideDuration={3000} onClose={closeClipFailureSnack}>\n        <Alert onClose={closeClipFailureSnack} severity=\"error\">\n          Processed and copied to clipboard!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}